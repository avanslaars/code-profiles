'use strict';
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var fill = require('fill-range');
var stringify = require('./stringify');
var utils = require('./utils');
var append = function (queue, stash, enclose) {
    if (queue === void 0) { queue = ''; }
    if (stash === void 0) { stash = ''; }
    if (enclose === void 0) { enclose = false; }
    var result = [];
    queue = [].concat(queue);
    stash = [].concat(stash);
    if (!stash.length)
        return queue;
    if (!queue.length) {
        return enclose ? utils.flatten(stash).map(function (ele) { return "{" + ele + "}"; }) : stash;
    }
    for (var _i = 0, queue_1 = queue; _i < queue_1.length; _i++) {
        var item = queue_1[_i];
        if (Array.isArray(item)) {
            for (var _a = 0, item_1 = item; _a < item_1.length; _a++) {
                var value = item_1[_a];
                result.push(append(value, stash, enclose));
            }
        }
        else {
            for (var _b = 0, stash_1 = stash; _b < stash_1.length; _b++) {
                var ele = stash_1[_b];
                if (enclose === true && typeof ele === 'string')
                    ele = "{" + ele + "}";
                result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));
            }
        }
    }
    return utils.flatten(result);
};
var expand = function (ast, options) {
    if (options === void 0) { options = {}; }
    var rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;
    var walk = function (node, parent) {
        if (parent === void 0) { parent = {}; }
        node.queue = [];
        var p = parent;
        var q = parent.queue;
        while (p.type !== 'brace' && p.type !== 'root' && p.parent) {
            p = p.parent;
            q = p.queue;
        }
        if (node.invalid || node.dollar) {
            q.push(append(q.pop(), stringify(node, options)));
            return;
        }
        if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {
            q.push(append(q.pop(), ['{}']));
            return;
        }
        if (node.nodes && node.ranges > 0) {
            var args = utils.reduce(node.nodes);
            if (utils.exceedsLimit.apply(utils, __spreadArray(__spreadArray([], args, false), [options.step, rangeLimit], false))) {
                throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');
            }
            var range = fill.apply(void 0, __spreadArray(__spreadArray([], args, false), [options], false));
            if (range.length === 0) {
                range = stringify(node, options);
            }
            q.push(append(q.pop(), range));
            node.nodes = [];
            return;
        }
        var enclose = utils.encloseBrace(node);
        var queue = node.queue;
        var block = node;
        while (block.type !== 'brace' && block.type !== 'root' && block.parent) {
            block = block.parent;
            queue = block.queue;
        }
        for (var i = 0; i < node.nodes.length; i++) {
            var child = node.nodes[i];
            if (child.type === 'comma' && node.type === 'brace') {
                if (i === 1)
                    queue.push('');
                queue.push('');
                continue;
            }
            if (child.type === 'close') {
                q.push(append(q.pop(), queue, enclose));
                continue;
            }
            if (child.value && child.type !== 'open') {
                queue.push(append(queue.pop(), child.value));
                continue;
            }
            if (child.nodes) {
                walk(child, node);
            }
        }
        return queue;
    };
    return utils.flatten(walk(ast));
};
module.exports = expand;
