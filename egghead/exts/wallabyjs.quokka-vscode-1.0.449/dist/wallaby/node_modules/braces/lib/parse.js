'use strict';
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var stringify = require('./stringify');
/**
 * Constants
 */
var _a = require('./constants'), MAX_LENGTH = _a.MAX_LENGTH, CHAR_BACKSLASH = _a.CHAR_BACKSLASH, /* \ */ CHAR_BACKTICK = _a.CHAR_BACKTICK, /* ` */ CHAR_COMMA = _a.CHAR_COMMA, /* , */ CHAR_DOT = _a.CHAR_DOT, /* . */ CHAR_LEFT_PARENTHESES = _a.CHAR_LEFT_PARENTHESES, /* ( */ CHAR_RIGHT_PARENTHESES = _a.CHAR_RIGHT_PARENTHESES, /* ) */ CHAR_LEFT_CURLY_BRACE = _a.CHAR_LEFT_CURLY_BRACE, /* { */ CHAR_RIGHT_CURLY_BRACE = _a.CHAR_RIGHT_CURLY_BRACE, /* } */ CHAR_LEFT_SQUARE_BRACKET = _a.CHAR_LEFT_SQUARE_BRACKET, /* [ */ CHAR_RIGHT_SQUARE_BRACKET = _a.CHAR_RIGHT_SQUARE_BRACKET, /* ] */ CHAR_DOUBLE_QUOTE = _a.CHAR_DOUBLE_QUOTE, /* " */ CHAR_SINGLE_QUOTE = _a.CHAR_SINGLE_QUOTE, /* ' */ CHAR_NO_BREAK_SPACE = _a.CHAR_NO_BREAK_SPACE, CHAR_ZERO_WIDTH_NOBREAK_SPACE = _a.CHAR_ZERO_WIDTH_NOBREAK_SPACE;
/**
 * parse
 */
var parse = function (input, options) {
    var _a;
    if (options === void 0) { options = {}; }
    if (typeof input !== 'string') {
        throw new TypeError('Expected a string');
    }
    var opts = options || {};
    var max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    if (input.length > max) {
        throw new SyntaxError("Input length (" + input.length + "), exceeds max characters (" + max + ")");
    }
    var ast = { type: 'root', input: input, nodes: [] };
    var stack = [ast];
    var block = ast;
    var prev = ast;
    var brackets = 0;
    var length = input.length;
    var index = 0;
    var depth = 0;
    var value;
    var memo = {};
    /**
     * Helpers
     */
    var advance = function () { return input[index++]; };
    var push = function (node) {
        if (node.type === 'text' && prev.type === 'dot') {
            prev.type = 'text';
        }
        if (prev && prev.type === 'text' && node.type === 'text') {
            prev.value += node.value;
            return;
        }
        block.nodes.push(node);
        node.parent = block;
        node.prev = prev;
        prev = node;
        return node;
    };
    push({ type: 'bos' });
    while (index < length) {
        block = stack[stack.length - 1];
        value = advance();
        /**
         * Invalid chars
         */
        if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
            continue;
        }
        /**
         * Escaped chars
         */
        if (value === CHAR_BACKSLASH) {
            push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });
            continue;
        }
        /**
         * Right square bracket (literal): ']'
         */
        if (value === CHAR_RIGHT_SQUARE_BRACKET) {
            push({ type: 'text', value: '\\' + value });
            continue;
        }
        /**
         * Left square bracket: '['
         */
        if (value === CHAR_LEFT_SQUARE_BRACKET) {
            brackets++;
            var closed = true;
            var next = void 0;
            while (index < length && (next = advance())) {
                value += next;
                if (next === CHAR_LEFT_SQUARE_BRACKET) {
                    brackets++;
                    continue;
                }
                if (next === CHAR_BACKSLASH) {
                    value += advance();
                    continue;
                }
                if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                    brackets--;
                    if (brackets === 0) {
                        break;
                    }
                }
            }
            push({ type: 'text', value: value });
            continue;
        }
        /**
         * Parentheses
         */
        if (value === CHAR_LEFT_PARENTHESES) {
            block = push({ type: 'paren', nodes: [] });
            stack.push(block);
            push({ type: 'text', value: value });
            continue;
        }
        if (value === CHAR_RIGHT_PARENTHESES) {
            if (block.type !== 'paren') {
                push({ type: 'text', value: value });
                continue;
            }
            block = stack.pop();
            push({ type: 'text', value: value });
            block = stack[stack.length - 1];
            continue;
        }
        /**
         * Quotes: '|"|`
         */
        if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
            var open = value;
            var next = void 0;
            if (options.keepQuotes !== true) {
                value = '';
            }
            while (index < length && (next = advance())) {
                if (next === CHAR_BACKSLASH) {
                    value += next + advance();
                    continue;
                }
                if (next === open) {
                    if (options.keepQuotes === true)
                        value += next;
                    break;
                }
                value += next;
            }
            push({ type: 'text', value: value });
            continue;
        }
        /**
         * Left curly brace: '{'
         */
        if (value === CHAR_LEFT_CURLY_BRACE) {
            depth++;
            var dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;
            var brace = {
                type: 'brace',
                open: true,
                close: false,
                dollar: dollar,
                depth: depth,
                commas: 0,
                ranges: 0,
                nodes: []
            };
            block = push(brace);
            stack.push(block);
            push({ type: 'open', value: value });
            continue;
        }
        /**
         * Right curly brace: '}'
         */
        if (value === CHAR_RIGHT_CURLY_BRACE) {
            if (block.type !== 'brace') {
                push({ type: 'text', value: value });
                continue;
            }
            var type = 'close';
            block = stack.pop();
            block.close = true;
            push({ type: type, value: value });
            depth--;
            block = stack[stack.length - 1];
            continue;
        }
        /**
         * Comma: ','
         */
        if (value === CHAR_COMMA && depth > 0) {
            if (block.ranges > 0) {
                block.ranges = 0;
                var open = block.nodes.shift();
                block.nodes = [open, { type: 'text', value: stringify(block) }];
            }
            push({ type: 'comma', value: value });
            block.commas++;
            continue;
        }
        /**
         * Dot: '.'
         */
        if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
            var siblings = block.nodes;
            if (depth === 0 || siblings.length === 0) {
                push({ type: 'text', value: value });
                continue;
            }
            if (prev.type === 'dot') {
                block.range = [];
                prev.value += value;
                prev.type = 'range';
                if (block.nodes.length !== 3 && block.nodes.length !== 5) {
                    block.invalid = true;
                    block.ranges = 0;
                    prev.type = 'text';
                    continue;
                }
                block.ranges++;
                block.args = [];
                continue;
            }
            if (prev.type === 'range') {
                siblings.pop();
                var before = siblings[siblings.length - 1];
                before.value += prev.value + value;
                prev = before;
                block.ranges--;
                continue;
            }
            push({ type: 'dot', value: value });
            continue;
        }
        /**
         * Text
         */
        push({ type: 'text', value: value });
    }
    // Mark imbalanced braces and brackets as invalid
    do {
        block = stack.pop();
        if (block.type !== 'root') {
            block.nodes.forEach(function (node) {
                if (!node.nodes) {
                    if (node.type === 'open')
                        node.isOpen = true;
                    if (node.type === 'close')
                        node.isClose = true;
                    if (!node.nodes)
                        node.type = 'text';
                    node.invalid = true;
                }
            });
            // get the location of the block on parent.nodes (block's siblings)
            var parent = stack[stack.length - 1];
            var index_1 = parent.nodes.indexOf(block);
            // replace the (invalid) block with it's nodes
            (_a = parent.nodes).splice.apply(_a, __spreadArray([index_1, 1], block.nodes, false));
        }
    } while (stack.length > 0);
    push({ type: 'eos' });
    return ast;
};
module.exports = parse;
