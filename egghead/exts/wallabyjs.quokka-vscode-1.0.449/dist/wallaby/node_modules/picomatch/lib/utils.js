'use strict';
var path = require('path');
var win32 = process.platform === 'win32';
var _a = require('./constants'), REGEX_BACKSLASH = _a.REGEX_BACKSLASH, REGEX_REMOVE_BACKSLASH = _a.REGEX_REMOVE_BACKSLASH, REGEX_SPECIAL_CHARS = _a.REGEX_SPECIAL_CHARS, REGEX_SPECIAL_CHARS_GLOBAL = _a.REGEX_SPECIAL_CHARS_GLOBAL;
exports.hasRegexChars = function (str) { return REGEX_SPECIAL_CHARS.test(str); };
exports.escapeRegex = function (str) { return str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\$1'); };
exports.toPosixSlashes = function (str) { return str.replace(REGEX_BACKSLASH, '/'); };
exports.removeBackslashes = function (str) {
    return str.replace(REGEX_REMOVE_BACKSLASH, function (match) {
        return match === '\\' ? '' : match;
    });
};
exports.supportsLookbehinds = function () {
    var segs = process.version.slice(1).split('.').map(Number);
    if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {
        return true;
    }
    return false;
};
exports.isWindows = function (options) {
    if (options && typeof options.windows === 'boolean') {
        return options.windows;
    }
    return win32 === true || path.sep === '\\';
};
exports.escapeLast = function (input, char, lastIdx) {
    var idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1)
        return input;
    if (input[idx - 1] === '\\')
        return exports.escapeLast(input, char, idx - 1);
    return input.slice(0, idx) + '\\' + input.slice(idx);
};
exports.removePrefix = function (input, state) {
    if (state === void 0) { state = {}; }
    var output = input;
    if (output.startsWith('./')) {
        output = output.slice(2);
        state.prefix = './';
    }
    return output;
};
exports.wrapOutput = function (input, state, options) {
    if (state === void 0) { state = {}; }
    if (options === void 0) { options = {}; }
    var prepend = options.contains ? '' : '^';
    var append = options.contains ? '' : '$';
    var output = prepend + "(?:" + input + ")" + append;
    if (state.negated === true) {
        output = "(?:^(?!" + output + ").*$)";
    }
    return output;
};
