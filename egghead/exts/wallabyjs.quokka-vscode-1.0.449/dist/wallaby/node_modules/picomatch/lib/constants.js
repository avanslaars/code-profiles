'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var path = require('path');
var WIN_SLASH = '\\\\/';
var WIN_NO_SLASH = "[^" + WIN_SLASH + "]";
/**
 * Posix glob regex
 */
var DOT_LITERAL = '\\.';
var PLUS_LITERAL = '\\+';
var QMARK_LITERAL = '\\?';
var SLASH_LITERAL = '\\/';
var ONE_CHAR = '(?=.)';
var QMARK = '[^/]';
var END_ANCHOR = "(?:" + SLASH_LITERAL + "|$)";
var START_ANCHOR = "(?:^|" + SLASH_LITERAL + ")";
var DOTS_SLASH = DOT_LITERAL + "{1,2}" + END_ANCHOR;
var NO_DOT = "(?!" + DOT_LITERAL + ")";
var NO_DOTS = "(?!" + START_ANCHOR + DOTS_SLASH + ")";
var NO_DOT_SLASH = "(?!" + DOT_LITERAL + "{0,1}" + END_ANCHOR + ")";
var NO_DOTS_SLASH = "(?!" + DOTS_SLASH + ")";
var QMARK_NO_DOT = "[^." + SLASH_LITERAL + "]";
var STAR = QMARK + "*?";
var POSIX_CHARS = {
    DOT_LITERAL: DOT_LITERAL,
    PLUS_LITERAL: PLUS_LITERAL,
    QMARK_LITERAL: QMARK_LITERAL,
    SLASH_LITERAL: SLASH_LITERAL,
    ONE_CHAR: ONE_CHAR,
    QMARK: QMARK,
    END_ANCHOR: END_ANCHOR,
    DOTS_SLASH: DOTS_SLASH,
    NO_DOT: NO_DOT,
    NO_DOTS: NO_DOTS,
    NO_DOT_SLASH: NO_DOT_SLASH,
    NO_DOTS_SLASH: NO_DOTS_SLASH,
    QMARK_NO_DOT: QMARK_NO_DOT,
    STAR: STAR,
    START_ANCHOR: START_ANCHOR
};
/**
 * Windows glob regex
 */
var WINDOWS_CHARS = __assign(__assign({}, POSIX_CHARS), { SLASH_LITERAL: "[" + WIN_SLASH + "]", QMARK: WIN_NO_SLASH, STAR: WIN_NO_SLASH + "*?", DOTS_SLASH: DOT_LITERAL + "{1,2}(?:[" + WIN_SLASH + "]|$)", NO_DOT: "(?!" + DOT_LITERAL + ")", NO_DOTS: "(?!(?:^|[" + WIN_SLASH + "])" + DOT_LITERAL + "{1,2}(?:[" + WIN_SLASH + "]|$))", NO_DOT_SLASH: "(?!" + DOT_LITERAL + "{0,1}(?:[" + WIN_SLASH + "]|$))", NO_DOTS_SLASH: "(?!" + DOT_LITERAL + "{1,2}(?:[" + WIN_SLASH + "]|$))", QMARK_NO_DOT: "[^." + WIN_SLASH + "]", START_ANCHOR: "(?:^|[" + WIN_SLASH + "])", END_ANCHOR: "(?:[" + WIN_SLASH + "]|$)" });
/**
 * POSIX Bracket Regex
 */
var POSIX_REGEX_SOURCE = {
    alnum: 'a-zA-Z0-9',
    alpha: 'a-zA-Z',
    ascii: '\\x00-\\x7F',
    blank: ' \\t',
    cntrl: '\\x00-\\x1F\\x7F',
    digit: '0-9',
    graph: '\\x21-\\x7E',
    lower: 'a-z',
    print: '\\x20-\\x7E ',
    punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
    space: ' \\t\\r\\n\\v\\f',
    upper: 'A-Z',
    word: 'A-Za-z0-9_',
    xdigit: 'A-Fa-f0-9'
};
module.exports = {
    MAX_LENGTH: 1024 * 64,
    POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE,
    // regular expressions
    REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
    REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
    REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
    REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
    REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
    REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
    // Replace globs with equivalent patterns to reduce parsing time.
    REPLACEMENTS: {
        '***': '*',
        '**/**': '**',
        '**/**/**': '**'
    },
    // Digits
    CHAR_0: 48,
    CHAR_9: 57,
    // Alphabet chars.
    CHAR_UPPERCASE_A: 65,
    CHAR_LOWERCASE_A: 97,
    CHAR_UPPERCASE_Z: 90,
    CHAR_LOWERCASE_Z: 122,
    CHAR_LEFT_PARENTHESES: 40,
    CHAR_RIGHT_PARENTHESES: 41,
    CHAR_ASTERISK: 42,
    // Non-alphabetic chars.
    CHAR_AMPERSAND: 38,
    CHAR_AT: 64,
    CHAR_BACKWARD_SLASH: 92,
    CHAR_CARRIAGE_RETURN: 13,
    CHAR_CIRCUMFLEX_ACCENT: 94,
    CHAR_COLON: 58,
    CHAR_COMMA: 44,
    CHAR_DOT: 46,
    CHAR_DOUBLE_QUOTE: 34,
    CHAR_EQUAL: 61,
    CHAR_EXCLAMATION_MARK: 33,
    CHAR_FORM_FEED: 12,
    CHAR_FORWARD_SLASH: 47,
    CHAR_GRAVE_ACCENT: 96,
    CHAR_HASH: 35,
    CHAR_HYPHEN_MINUS: 45,
    CHAR_LEFT_ANGLE_BRACKET: 60,
    CHAR_LEFT_CURLY_BRACE: 123,
    CHAR_LEFT_SQUARE_BRACKET: 91,
    CHAR_LINE_FEED: 10,
    CHAR_NO_BREAK_SPACE: 160,
    CHAR_PERCENT: 37,
    CHAR_PLUS: 43,
    CHAR_QUESTION_MARK: 63,
    CHAR_RIGHT_ANGLE_BRACKET: 62,
    CHAR_RIGHT_CURLY_BRACE: 125,
    CHAR_RIGHT_SQUARE_BRACKET: 93,
    CHAR_SEMICOLON: 59,
    CHAR_SINGLE_QUOTE: 39,
    CHAR_SPACE: 32,
    CHAR_TAB: 9,
    CHAR_UNDERSCORE: 95,
    CHAR_VERTICAL_LINE: 124,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
    SEP: path.sep,
    /**
     * Create EXTGLOB_CHARS
     */
    extglobChars: function (chars) {
        return {
            '!': { type: 'negate', open: '(?:(?!(?:', close: "))" + chars.STAR + ")" },
            '?': { type: 'qmark', open: '(?:', close: ')?' },
            '+': { type: 'plus', open: '(?:', close: ')+' },
            '*': { type: 'star', open: '(?:', close: ')*' },
            '@': { type: 'at', open: '(?:', close: ')' }
        };
    },
    /**
     * Create GLOB_CHARS
     */
    globChars: function (win32) {
        return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
    }
};
