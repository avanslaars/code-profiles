/// <reference types="node" />
import CancellationToken from "cancellationtoken";
import { IDisposableObservable } from "./IDisposableObservable";
export declare function writeAsync(stream: NodeJS.WritableStream, chunk: any): Promise<void>;
export declare function writeSubstream(stream: NodeJS.WritableStream): NodeJS.WritableStream;
export declare function readSubstream(stream: NodeJS.ReadableStream): NodeJS.ReadableStream;
export declare function getBufferFrom(readable: NodeJS.ReadableStream, size: number, allowEndOfStream?: false, cancellationToken?: CancellationToken): Promise<Buffer>;
export declare function getBufferFrom(readable: NodeJS.ReadableStream, size: number, allowEndOfStream: true, cancellationToken?: CancellationToken): Promise<Buffer | null>;
export declare function throwIfDisposed(value: IDisposableObservable): void;
export declare function requireInteger(parameterName: string, value: number, serializedByteLength: number, signed?: "unsigned" | "signed"): void;
export declare function removeFromQueue<T>(value: T, queue: T[]): void;
