/// <reference types="node" />
import { MessageWriter, MessageReader, Event, Message, Disposable } from "vscode-jsonrpc";
import { PartialMessageInfo, DataCallback } from "vscode-jsonrpc/lib/messageReader";
import { Writable } from "stream";
/** Reads JSON-RPC messages that have a 32-bit big endian header describing the length of each message. */
export declare class BE32MessageReader implements MessageReader {
    private readonly readable;
    private readonly decoder;
    private readonly errorEmitter;
    private readonly closeEmitter;
    private readonly partialMessageEmitter;
    constructor(readable: NodeJS.ReadableStream, decoder: (buffer: Uint8Array) => Promise<Message>);
    get onError(): Event<Error>;
    get onClose(): Event<void>;
    get onPartialMessage(): Event<PartialMessageInfo>;
    listen(callback: DataCallback): Disposable;
    dispose(): void;
}
/** Writes JSON-RPC messages that have a 32-bit big endian header describing the length of each message. */
export declare class BE32MessageWriter implements MessageWriter {
    private readonly writable;
    private readonly encoder;
    private readonly errorEmitter;
    private readonly closeEmitter;
    private readonly semaphore;
    private readonly headerBuffer;
    private errorCount;
    constructor(writable: NodeJS.WritableStream | Writable, encoder: (message: Message) => Promise<Uint8Array>);
    get onError(): Event<[Error, Message | undefined, number | undefined]>;
    get onClose(): Event<void>;
    write(msg: Message): Promise<void>;
    dispose(): void;
}
