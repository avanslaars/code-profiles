"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BE32MessageWriter = exports.BE32MessageReader = void 0;
const vscode_jsonrpc_1 = require("vscode-jsonrpc");
const cancellationtoken_1 = require("cancellationtoken");
const stream_1 = require("stream");
const await_semaphore_1 = require("await-semaphore");
const Utilities_1 = require("nerdbank-streams/Utilities");
/** Reads JSON-RPC messages that have a 32-bit big endian header describing the length of each message. */
class BE32MessageReader {
    constructor(readable, decoder) {
        this.readable = readable;
        this.decoder = decoder;
        this.errorEmitter = new vscode_jsonrpc_1.Emitter();
        this.closeEmitter = new vscode_jsonrpc_1.Emitter();
        this.partialMessageEmitter = new vscode_jsonrpc_1.Emitter();
    }
    get onError() { return this.errorEmitter.event; }
    get onClose() { return this.closeEmitter.event; }
    get onPartialMessage() { return this.partialMessageEmitter.event; }
    listen(callback) {
        this.readable.on('error', err => this.errorEmitter.fire(err));
        const cts = cancellationtoken_1.default.create();
        (async () => {
            try {
                while (true) {
                    const headerBuffer = await Utilities_1.getBufferFrom(this.readable, 4, true, cts.token);
                    if (!headerBuffer) {
                        this.closeEmitter.fire();
                        return;
                    }
                    const payloadLength = headerBuffer.readInt32BE(0);
                    const payload = await Utilities_1.getBufferFrom(this.readable, payloadLength, false, cts.token);
                    const msg = await this.decoder(payload);
                    callback(msg);
                }
            }
            catch (error) {
                this.errorEmitter.fire(error);
            }
        })();
        return vscode_jsonrpc_1.Disposable.create(() => cts.cancel());
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
}
exports.BE32MessageReader = BE32MessageReader;
/** Writes JSON-RPC messages that have a 32-bit big endian header describing the length of each message. */
class BE32MessageWriter {
    constructor(writable, encoder) {
        this.writable = writable;
        this.encoder = encoder;
        this.errorEmitter = new vscode_jsonrpc_1.Emitter();
        this.closeEmitter = new vscode_jsonrpc_1.Emitter();
        this.semaphore = new await_semaphore_1.Semaphore(1);
        this.headerBuffer = Buffer.alloc(4);
        this.errorCount = 0;
        writable.on('error', err => this.errorEmitter.fire([err, undefined, undefined]));
        writable.once('close', () => this.closeEmitter.fire());
    }
    get onError() { return this.errorEmitter.event; }
    get onClose() { return this.closeEmitter.event; }
    async write(msg) {
        await this.semaphore.use(async () => {
            try {
                const encoded = await this.encoder(msg);
                this.headerBuffer.writeInt32BE(encoded.byteLength, 0);
                if (this.writable instanceof stream_1.Writable) {
                    this.writable.cork();
                }
                const writeOps = Promise.all([
                    Utilities_1.writeAsync(this.writable, this.headerBuffer),
                    Utilities_1.writeAsync(this.writable, encoded),
                ]);
                if (this.writable instanceof stream_1.Writable) {
                    this.writable.uncork();
                }
                await writeOps;
            }
            catch (error) {
                this.errorCount++;
                this.errorEmitter.fire([asError(error), undefined, this.errorCount]);
            }
        });
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
}
exports.BE32MessageWriter = BE32MessageWriter;
function asError(error) {
    if (error instanceof Error) {
        return error;
    }
    else {
        return new Error(`Writer received error. Reason: ${typeof error.message === 'string' ? error.message : 'unknown'}`);
    }
}

// SIG // Begin signature block
// SIG // MIIheQYJKoZIhvcNAQcCoIIhajCCIWYCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // fpPmPsfQ9bd3HS4j1jwWxx0b6KeGs/NSDYWlB+uVbxWg
// SIG // ggt2MIIE/jCCA+agAwIBAgITMwAAAyauzu35vOR7kgAA
// SIG // AAADJjANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDEwMB4XDTIwMDMwNDE4MjkyOVoX
// SIG // DTIxMDMwMzE4MjkyOVowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // nZc0xLte0Zp4PVs0bsm9sbjvgdQcrPi/jo5HMBqVz3i/
// SIG // v58maYsTXTnKfo5YVLnOEdTQzdMajP+5bGM0UaIFyUWO
// SIG // t9e0afja/7xLEMQRr/B7aYO5HkhHCTmdhZfGGUI6tk21
// SIG // xW4y/3lnK336zimaOVrPFlXcdUGrqyy8UoBvPbAkOutq
// SIG // HQ17LE7N3G0Xj62tBLgulvRiJGyu3SHrlQ6iUDNcrsi/
// SIG // U2BkvrpZWGHZtEbO0+vXPrryzcJvvu+9InEYRdnLdC3S
// SIG // Fi580IVdmpeUP8RxhDO8jbPKI/B8MZwt6/PlamNT5RDS
// SIG // aQdRbeDBU1p75SOn+/bHlMQpNvl3KxUZzQIDAQABo4IB
// SIG // fTCCAXkwHwYDVR0lBBgwFgYKKwYBBAGCNz0GAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFF1zu5HCevZdHtlOyC0v4AOr
// SIG // ptwSMFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNy
// SIG // b3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQx
// SIG // FjAUBgNVBAUTDTIzMDg2NSs0NTg0OTQwHwYDVR0jBBgw
// SIG // FoAU5vxfe7siAFjkck619CF0IzLm76wwVgYDVR0fBE8w
// SIG // TTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29t
// SIG // L3BraS9jcmwvcHJvZHVjdHMvTWljQ29kU2lnUENBXzIw
// SIG // MTAtMDctMDYuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggr
// SIG // BgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L3BraS9jZXJ0cy9NaWNDb2RTaWdQQ0FfMjAxMC0wNy0w
// SIG // Ni5jcnQwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsF
// SIG // AAOCAQEAGebsrQzcccEshd0dcqPjhJA8+0XYpGaevZjO
// SIG // fQpgJWyL4IN6ZVOziQ8iF6TPdfVjYQEVv7dgMnk9/DbP
// SIG // 2nV9kfU0pCSQLpZRAEcGyvi2te6YyrWvET0oEUOHiJkj
// SIG // HbExyhv+sVmWiyP7W2nfM3NQCaXvsqY3Nkl19cr7j9N1
// SIG // 5FMhGpNLgGj2BBbfKO1gkiH6m2/mt9Habf/nO+vKMbyI
// SIG // 1leZaX1g6f2BNoMZaQsTxqVPgZyWcdnkAPZwpDaPDhOu
// SIG // i837rVdRlFtYaqnYmGjJjV9trXpU/GOg9m4zThgOH6AS
// SIG // 65iOjlab05DLZFh7H2dCppHvePf1Lv6y/RUoF12zLTCC
// SIG // BnAwggRYoAMCAQICCmEMUkwAAAAAAAMwDQYJKoZIhvcN
// SIG // AQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNV
// SIG // BAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1
// SIG // dGhvcml0eSAyMDEwMB4XDTEwMDcwNjIwNDAxN1oXDTI1
// SIG // MDcwNjIwNTAxN1owfjELMAkGA1UEBhMCVVMxEzARBgNV
// SIG // BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
// SIG // HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEo
// SIG // MCYGA1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmluZyBQ
// SIG // Q0EgMjAxMDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
// SIG // AQoCggEBAOkOZFB5Z7XE4/0JAEyelKz3VmjqRNjPxVhP
// SIG // qaV2fG1FutM5krSkHvn5ZYLkF9KP/UScCOhlk84sVYS/
// SIG // fQjjLiuoQSsYt6JLbklMaxUH3tHSwokecZTNtX9LtK8I
// SIG // 2MyI1msXlDqTziY/7Ob+NJhX1R1dSfayKi7VhbtZP/iQ
// SIG // tCuDdMorsztG4/BGScEXZlTJHL0dxFViV3L4Z7klIDTe
// SIG // XaallV6rKIDN1bKe5QO1Y9OyFMjByIomCll/B+z/Du2A
// SIG // EjVMEqa+Ulv1ptrgiwtId9aFR9UQucboqu6Lai0FXGDG
// SIG // tCpbnCMcX0XjGhQebzfLGTOAaolNo2pmY3iT1TDPlR8C
// SIG // AwEAAaOCAeMwggHfMBAGCSsGAQQBgjcVAQQDAgEAMB0G
// SIG // A1UdDgQWBBTm/F97uyIAWORyTrX0IXQjMubvrDAZBgkr
// SIG // BgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMC
// SIG // AYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV
// SIG // 9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEug
// SIG // SaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtp
// SIG // L2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0w
// SIG // Ni0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUF
// SIG // BzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtp
// SIG // L2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNy
// SIG // dDCBnQYDVR0gBIGVMIGSMIGPBgkrBgEEAYI3LgMwgYEw
// SIG // PQYIKwYBBQUHAgEWMWh0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9QS0kvZG9jcy9DUFMvZGVmYXVsdC5odG0wQAYI
// SIG // KwYBBQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AUABvAGwA
// SIG // aQBjAHkAXwBTAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJ
// SIG // KoZIhvcNAQELBQADggIBABp071dPKXvEFoV4uFDTIvwJ
// SIG // nayCl/g0/yosl5US5eS/z7+TyOM0qduBuNweAL7SNW+v
// SIG // 5X95lXflAtTx69jNTh4bYaLCWiMa8IyoYlFFZwjjPzwe
// SIG // k/gwhRfIOUCm1w6zISnlpaFpjCKTzHSY56FHQ/JTrMAP
// SIG // MGl//tIlIG1vYdPfB9XZcgAsaYZ2PVHbpjlIyTdhbQfd
// SIG // UxnLp9Zhwr/ig6sP4GubldZ9KFGwiUpRpJpsyLcfShoO
// SIG // aanX3MF+0Ulwqratu3JHYxf6ptaipobsqBBEm2O2smmJ
// SIG // BsdGhnoYP+jFHSHVe/kCIy3FQcu/HUzIFu+xnH/8IktJ
// SIG // im4V46Z/dlvRU3mRhZ3V0ts9czXzPK5UslJHasCqE5XS
// SIG // jhHamWdeMoz7N4XR3HWFnIfGWleFwr/dDY+Mmy3rtO7P
// SIG // J9O1Xmn6pBYEAackZ3PPTU+23gVWl3r36VJN9HcFT4XG
// SIG // 2Avxju1CCdENduMjVngiJja+yrGMbqod5IXaRzNij6TJ
// SIG // kTNfcR5Ar5hlySLoQiElihwtYNk3iUGJKhYP12E8lGhg
// SIG // Uu/WR5mggEDuFYF3PpzgUxgaUB04lZseZjMTJzkXeIc2
// SIG // zk7DX7L1PUdTtuDl2wthPSrXkizON1o+QEIxpB8QCMJW
// SIG // nL8kXVECnWp50hfT2sGUjgd7JXFEqwZq5tTG3yOalnXF
// SIG // MYIVWzCCFVcCAQEwgZUwfjELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEoMCYGA1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmlu
// SIG // ZyBQQ0EgMjAxMAITMwAAAyauzu35vOR7kgAAAAADJjAN
// SIG // BglghkgBZQMEAgEFAKCBrjAZBgkqhkiG9w0BCQMxDAYK
// SIG // KwYBBAGCNwIBBDAcBgorBgEEAYI3AgELMQ4wDAYKKwYB
// SIG // BAGCNwIBFTAvBgkqhkiG9w0BCQQxIgQguTGq40DZ6IVO
// SIG // I0RLiBFuubUJLc319sIwRNQOIULVH9wwQgYKKwYBBAGC
// SIG // NwIBDDE0MDKgFIASAE0AaQBjAHIAbwBzAG8AZgB0oRqA
// SIG // GGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbTANBgkqhkiG
// SIG // 9w0BAQEFAASCAQAigu6EbQ8hE6jBhdTwM+iO8f17Ytb1
// SIG // U1PpCh3E3/UIYmMYs8GYPZ0wnst2NV2nUTwQAObWhY34
// SIG // YkzvFFjKjECcyyy8T85ZCtRSx5U+lxSaM2kezzEvvvlY
// SIG // 290Z6BqCBhA5JjDw9Ep0yy/VdkbQ1BFzyp+REmpcsiHW
// SIG // ljFZdxaHmJAzAJxEuz1dYZh9DZlBPK+gc01KoL1Z3XlC
// SIG // anTyLihZBb2iyHedQ16BKbqZevR9OFg2KSbW32mi1Pkq
// SIG // OA+vQqcYHhEAGFdTDrud719TmyWmPD9DI7LiaYRg3q5O
// SIG // XZgqFhbTDE9FeSBB7jm29UkSWg5CD7DkrOCTJm0H9nZU
// SIG // JViJoYIS5TCCEuEGCisGAQQBgjcDAwExghLRMIISzQYJ
// SIG // KoZIhvcNAQcCoIISvjCCEroCAQMxDzANBglghkgBZQME
// SIG // AgEFADCCAVEGCyqGSIb3DQEJEAEEoIIBQASCATwwggE4
// SIG // AgEBBgorBgEEAYRZCgMBMDEwDQYJYIZIAWUDBAIBBQAE
// SIG // IOAhQuYY7Kp36cc0739bgbqSsMlGQg39FTwxY6omZSXc
// SIG // AgZe1lN0dyoYEzIwMjAwNjExMTg0NTI2LjA4N1owBIAC
// SIG // AfSggdCkgc0wgcoxCzAJBgNVBAYTAlVTMQswCQYDVQQI
// SIG // EwJXQTEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRN
// SIG // aWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0
// SIG // ZWQxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjNCRDQt
// SIG // NEI4MC02OUMzMSUwIwYDVQQDExxNaWNyb3NvZnQgVGlt
// SIG // ZS1TdGFtcCBTZXJ2aWNloIIOPDCCBPEwggPZoAMCAQIC
// SIG // EzMAAAEL5Pm+j29MHdAAAAAAAQswDQYJKoZIhvcNAQEL
// SIG // BQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMd
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwHhcN
// SIG // MTkxMDIzMjMxOTE1WhcNMjEwMTIxMjMxOTE1WjCByjEL
// SIG // MAkGA1UEBhMCVVMxCzAJBgNVBAgTAldBMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xLTArBgNVBAsTJE1pY3Jvc29mdCBJcmVs
// SIG // YW5kIE9wZXJhdGlvbnMgTGltaXRlZDEmMCQGA1UECxMd
// SIG // VGhhbGVzIFRTUyBFU046M0JENC00QjgwLTY5QzMxJTAj
// SIG // BgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZp
// SIG // Y2UwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
// SIG // AQCXAtWdRjFBuM+D2nhUKLVuWv9cZcq1/8emykQBplDi
// SIG // i8DqwwCNnD0zJhz7n94WtWjFsc5KL/dF8gKWTMRH5MVT
// SIG // a5dxCJu6VtZobc+sztM+0JPM5Vmcb/7D+AlFERGAkQGG
// SIG // xO/Z4fxHH1/EcZ/iwUimzafXjBOlIQ3RSxUAj980liuA
// SIG // yNCrj8JdunGR3nVSRvxJtWpUZvlIUrYY4LDmJJsFsI8g
// SIG // sch3LrchmPeBkoxsvy7RpKhcOQtTYacD48vz7fzT2cic
// SIG // iJqAXxZt7fth8sgqKiUURCVuSlcUKXBXm/1dcYCKqOoU
// SIG // z2YGu2i0t4K/X17JWZ5jdN1vxqzSQa9P4PHxAgMBAAGj
// SIG // ggEbMIIBFzAdBgNVHQ4EFgQUrR/Z6h2KHpzgmA1QRGX/
// SIG // 921e3u8wHwYDVR0jBBgwFoAU1WM6XIoxkPNDe3xGG8Uz
// SIG // aFqFbVUwVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2Ny
// SIG // bC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMv
// SIG // TWljVGltU3RhUENBXzIwMTAtMDctMDEuY3JsMFoGCCsG
// SIG // AQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNUaW1T
// SIG // dGFQQ0FfMjAxMC0wNy0wMS5jcnQwDAYDVR0TAQH/BAIw
// SIG // ADATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0B
// SIG // AQsFAAOCAQEAJuijnanvNrS63e87CK0gwImI8C4JdhxL
// SIG // LPnA6m/pUSXWel9KCa3t95NRNO36NgemDxhskz7rVHiU
// SIG // igb1pJdm+TB5Shg2DlPi1UhdCTaN5lTWZ+rHAFfDI4i2
// SIG // gdKOwdyug73m5ja2dqfDTl2Di5axwcBgDvGsZLfBm+aG
// SIG // ut2vUGBBg1QjMKfqQGqMJCYwXPGdHmwRN1UN5MpORBkT
// SIG // mk2DEWWjRm0LKQ1/eV4KYiU5cV4GC0/8/q/X71wbrwdy
// SIG // H2Zyvh2mIOE+4T9mZc7H0CzZ8QdqTHd2xbTT1GSNReeY
// SIG // YlnTkWlCiELjYkInHUfwumC1pCuZMf4ITNw7KjeOGPyK
// SIG // DTCCBnEwggRZoAMCAQICCmEJgSoAAAAAAAIwDQYJKoZI
// SIG // hvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAw
// SIG // BgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRl
// SIG // IEF1dGhvcml0eSAyMDEwMB4XDTEwMDcwMTIxMzY1NVoX
// SIG // DTI1MDcwMTIxNDY1NVowfDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // UENBIDIwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
// SIG // ggEKAoIBAQCpHQ28dxGKOiDs/BOX9fp/aZRrdFQQ1aUK
// SIG // AIKF++18aEssX8XD5WHCdrc+Zitb8BVTJwQxH0EbGpUd
// SIG // zgkTjnxhMFmxMEQP8WCIhFRDDNdNuDgIs0Ldk6zWczBX
// SIG // JoKjRQ3Q6vVHgc2/JGAyWGBG8lhHhjKEHnRhZ5FfgVSx
// SIG // z5NMksHEpl3RYRNuKMYa+YaAu99h/EbBJx0kZxJyGiGK
// SIG // r0tkiVBisV39dx898Fd1rL2KQk1AUdEPnAY+Z3/1ZsAD
// SIG // lkR+79BL/W7lmsqxqPJ6Kgox8NpOBpG2iAg16HgcsOmZ
// SIG // zTznL0S6p/TcZL2kAcEgCZN4zfy8wMlEXV4WnAEFTyJN
// SIG // AgMBAAGjggHmMIIB4jAQBgkrBgEEAYI3FQEEAwIBADAd
// SIG // BgNVHQ4EFgQU1WM6XIoxkPNDe3xGG8UzaFqFbVUwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwgaAGA1UdIAEB/wSBlTCBkjCBjwYJKwYBBAGCNy4D
// SIG // MIGBMD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jv
// SIG // c29mdC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRt
// SIG // MEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAFAA
// SIG // bwBsAGkAYwB5AF8AUwB0AGEAdABlAG0AZQBuAHQALiAd
// SIG // MA0GCSqGSIb3DQEBCwUAA4ICAQAH5ohRDeLG4Jg/gXED
// SIG // PZ2joSFvs+umzPUxvs8F4qn++ldtGTCzwsVmyWrf9efw
// SIG // eL3HqJ4l4/m87WtUVwgrUYJEEvu5U4zM9GASinbMQEBB
// SIG // m9xcF/9c+V4XNZgkVkt070IQyK+/f8Z/8jd9Wj8c8pl5
// SIG // SpFSAK84Dxf1L3mBZdmptWvkx872ynoAb0swRCQiPM/t
// SIG // A6WWj1kpvLb9BOFwnzJKJ/1Vry/+tuWOM7tiX5rbV0Dp
// SIG // 8c6ZZpCM/2pif93FSguRJuI57BlKcWOdeyFtw5yjojz6
// SIG // f32WapB4pm3S4Zz5Hfw42JT0xqUKloakvZ4argRCg7i1
// SIG // gJsiOCC1JeVk7Pf0v35jWSUPei45V3aicaoGig+JFrph
// SIG // pxHLmtgOR5qAxdDNp9DvfYPw4TtxCd9ddJgiCGHasFAe
// SIG // b73x4QDf5zEHpJM692VHeOj4qEir995yfmFrb3epgcun
// SIG // Caw5u+zGy9iCtHLNHfS4hQEegPsbiSpUObJb2sgNVZl6
// SIG // h3M7COaYLeqN4DMuEin1wC9UJyH3yKxO2ii4sanblrKn
// SIG // QqLJzxlBTeCG+SqaoxFmMNO7dDJL32N79ZmKLxvHIa9Z
// SIG // ta7cRDyXUHHXodLFVeNp3lfB0d4wwP3M5k37Db9dT+md
// SIG // Hhk4L7zPWAUu7w2gUDXa7wknHNWzfjUeCLraNtvTX4/e
// SIG // dIhJEqGCAs4wggI3AgEBMIH4oYHQpIHNMIHKMQswCQYD
// SIG // VQQGEwJVUzELMAkGA1UECBMCV0ExEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxhbmQg
// SIG // T3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFs
// SIG // ZXMgVFNTIEVTTjozQkQ0LTRCODAtNjlDMzElMCMGA1UE
// SIG // AxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaIj
// SIG // CgEBMAcGBSsOAwIaAxUA8f35HTFqU9zwihI9ktmsPgpw
// SIG // MFKggYMwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UE
// SIG // CBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEe
// SIG // MBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYw
// SIG // JAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0Eg
// SIG // MjAxMDANBgkqhkiG9w0BAQUFAAIFAOKMryUwIhgPMjAy
// SIG // MDA2MTEyMTI0NTNaGA8yMDIwMDYxMjIxMjQ1M1owdzA9
// SIG // BgorBgEEAYRZCgQBMS8wLTAKAgUA4oyvJQIBADAKAgEA
// SIG // AgImdQIB/zAHAgEAAgIRvjAKAgUA4o4ApQIBADA2Bgor
// SIG // BgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZCgMCoAowCAIB
// SIG // AAIDB6EgoQowCAIBAAIDAYagMA0GCSqGSIb3DQEBBQUA
// SIG // A4GBAGG/YHY9hej9+3sxSJWkM+yFC2zE0eCJwX+SUGs7
// SIG // yZIkVvBAcTw81jYsXmDmVLgVgwh11OOv3HF6+usk4CCG
// SIG // nNQETaAyhKeQNfh9p8So9C65kM2g5aGmL/4Qc2sM12lf
// SIG // NWWqbzkFMsi5L8IhXWd2ZfSXmDBccVioOWKnej1bDCHi
// SIG // MYIDDTCCAwkCAQEwgZMwfDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAg
// SIG // UENBIDIwMTACEzMAAAEL5Pm+j29MHdAAAAAAAQswDQYJ
// SIG // YIZIAWUDBAIBBQCgggFKMBoGCSqGSIb3DQEJAzENBgsq
// SIG // hkiG9w0BCRABBDAvBgkqhkiG9w0BCQQxIgQgkHrn/4lN
// SIG // q/s+lGAS+3R7lPZOQ2RaaZZv27hTT8DCmSIwgfoGCyqG
// SIG // SIb3DQEJEAIvMYHqMIHnMIHkMIG9BCA0j9DOIFM+OiSX
// SIG // 8XAkXAXivRR0LPHA6cVU/ATAE1xziDCBmDCBgKR+MHwx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAABC+T5
// SIG // vo9vTB3QAAAAAAELMCIEIK2kF0pKhtaDUN2xD12tYcaW
// SIG // S2Sx/Sowy6h1HvqWVuHqMA0GCSqGSIb3DQEBCwUABIIB
// SIG // AFXlkTlFGcd7z3Vwg9GMwstXIM4PFh4v1kP9N29AT2D/
// SIG // cn1z7YxJo+16IQi1bLZRt7JSi15tH/YLEpGsf3YR0OOa
// SIG // iDlhRqLQOHHCEVWm7zTTBdBNfHhWAt+REbh8RccWrAW0
// SIG // Anf9LuUQIS3D0h3Mw0TFIg1Yz6RVoO8xH3/SmogXdvY9
// SIG // Clf2LeaRi+22x0dqchuHrMoSzcHLIYBo/rYQ1BxT9WHU
// SIG // D/e88V7pgwH1EsAo0hgpNWAtoOPU3xc5QnBDAao9/zzH
// SIG // P0xgFTTDKLC8lWx7PUXbwmGWW4KhE8ZcQokjaTevxXWe
// SIG // aBHX65Ib2YGHJYmqQMKdgbo2O/8nZHb1FKo=
// SIG // End signature block
