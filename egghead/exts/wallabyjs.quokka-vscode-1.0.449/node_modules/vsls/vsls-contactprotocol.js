"use strict";
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.10.19.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/** Describes the kind of data to be formatted. */
/** Describes the kind of data to be formatted. */
var DataFormat;
(function (DataFormat) {
    DataFormat[DataFormat["Default"] = 'default'] = "Default";
    DataFormat[DataFormat["Email"] = 'email'] = "Email";
    DataFormat[DataFormat["Token"] = 'token'] = "Token";
    DataFormat[DataFormat["Path"] = 'path'] = "Path";
    DataFormat[DataFormat["Text"] = 'text'] = "Text";
    DataFormat[DataFormat["Uri"] = 'uri'] = "Uri";
    DataFormat[DataFormat["Omit"] = 'omit'] = "Omit";
    DataFormat[DataFormat["OmitDefault"] = 'omitDefault'] = "OmitDefault";
    DataFormat[DataFormat["Hide"] = 'hide'] = "Hide";
    DataFormat[DataFormat["SingleMember"] = 'singleMember'] = "SingleMember";
})(DataFormat = exports.DataFormat || (exports.DataFormat = {}));
/** Creates a decorator that saves the property format in a map attached to the class constructor. */
function dataFormat(...format) {
    return (target, propertyKey) => {
        if (!target.constructor.dataFormat) {
            target.constructor.dataFormat = {};
        }
        target.constructor.dataFormat[propertyKey] = format;
    };
}
exports.dataFormat = dataFormat;
class EventArgs {
}
exports.EventArgs = EventArgs;
/** Notification class for contact service */
class NotifyContactServiceEventArgs extends EventArgs {
}
exports.NotifyContactServiceEventArgs = NotifyContactServiceEventArgs;
/** The presence status default options */
var PresenceStatus;
(function (PresenceStatus) {
    PresenceStatus[PresenceStatus["Unknown"] = 'unknown'] = "Unknown";
    PresenceStatus[PresenceStatus["Available"] = 'available'] = "Available";
    PresenceStatus[PresenceStatus["Busy"] = 'busy'] = "Busy";
    PresenceStatus[PresenceStatus["DoNotDisturb"] = 'doNotDisturb'] = "DoNotDisturb";
    PresenceStatus[PresenceStatus["Away"] = 'away'] = "Away";
    PresenceStatus[PresenceStatus["Invisible"] = 'invisible'] = "Invisible";
    PresenceStatus[PresenceStatus["Offline"] = 'offline'] = "Offline";
})(PresenceStatus = exports.PresenceStatus || (exports.PresenceStatus = {}));
/** Contact property types */
var ContactProperty;
(function (ContactProperty) {
    ContactProperty[ContactProperty["DisplayName"] = 'displayName'] = "DisplayName";
    ContactProperty[ContactProperty["Email"] = 'email'] = "Email";
    ContactProperty[ContactProperty["AvatarUri"] = 'avatarUri'] = "AvatarUri";
    ContactProperty[ContactProperty["Status"] = 'status'] = "Status";
})(ContactProperty = exports.ContactProperty || (exports.ContactProperty = {}));
/** Contact entity */
class Contact {
}
exports.Contact = Contact;
/** Empty parameters */
class EmptyRequest {
}
exports.EmptyRequest = EmptyRequest;
/** Empty result */
class EmptyResponse {
}
exports.EmptyResponse = EmptyResponse;
class PublishPresenceRequest {
}
exports.PublishPresenceRequest = PublishPresenceRequest;
/** Parameters passed during Initialize method */
class InitializeRequest {
}
__decorate([
    dataFormat(PublishPresenceRequest),
    __metadata("design:type", PublishPresenceRequest)
], InitializeRequest.prototype, "publishPresence", void 0);
exports.InitializeRequest = InitializeRequest;
/** Definition of a workspace folder */
class WorkspaceFolder {
}
exports.WorkspaceFolder = WorkspaceFolder;
/** A workspace Uri from vscode */
class WorkspaceUri {
}
exports.WorkspaceUri = WorkspaceUri;
/** Capabilities that a service would offer */
class Capabilities {
}
exports.Capabilities = Capabilities;
/** Returned on the Initialized method */
class InitializeResponse {
}
__decorate([
    dataFormat(Capabilities),
    __metadata("design:type", Capabilities)
], InitializeResponse.prototype, "capabilities", void 0);
__decorate([
    dataFormat(Contact),
    __metadata("design:type", Contact)
], InitializeResponse.prototype, "selfContact", void 0);
exports.InitializeResponse = InitializeResponse;
/** The signed state option */
var SignedStatus;
(function (SignedStatus) {
    SignedStatus[SignedStatus["None"] = 'none'] = "None";
    SignedStatus[SignedStatus["SignedOut"] = 'signedOut'] = "SignedOut";
    SignedStatus[SignedStatus["SigningIn"] = 'signingIn'] = "SigningIn";
    SignedStatus[SignedStatus["SignedIn"] = 'signedIn'] = "SignedIn";
})(SignedStatus = exports.SignedStatus || (exports.SignedStatus = {}));
/** A presence status changed for a contact entity */
class ContactPresenceUpdate {
}
exports.ContactPresenceUpdate = ContactPresenceUpdate;
/** Batch of presence changed for multiple contacts */
class PresenceChangedNotification {
}
__decorate([
    dataFormat(ContactPresenceUpdate),
    __metadata("design:type", Array)
], PresenceChangedNotification.prototype, "changes", void 0);
exports.PresenceChangedNotification = PresenceChangedNotification;
class ContactPropertyValueChanged {
}
exports.ContactPropertyValueChanged = ContactPropertyValueChanged;
class ContactChangedNotification {
}
exports.ContactChangedNotification = ContactChangedNotification;
class ContactPropertiesChangedNotification {
}
exports.ContactPropertiesChangedNotification = ContactPropertiesChangedNotification;
class InviteRequest {
}
exports.InviteRequest = InviteRequest;
class InviteReceivedNotification {
}
__decorate([
    dataFormat(Contact),
    __metadata("design:type", Contact)
], InviteReceivedNotification.prototype, "fromContact", void 0);
exports.InviteReceivedNotification = InviteReceivedNotification;
class SelfContactNotification {
}
__decorate([
    dataFormat(Contact),
    __metadata("design:type", Contact)
], SelfContactNotification.prototype, "contact", void 0);
exports.SelfContactNotification = SelfContactNotification;
class ContactsNotification {
}
__decorate([
    dataFormat(Contact),
    __metadata("design:type", Array)
], ContactsNotification.prototype, "contacts", void 0);
exports.ContactsNotification = ContactsNotification;
class SuggestedContactsNotification extends ContactsNotification {
}
exports.SuggestedContactsNotification = SuggestedContactsNotification;
class ContactPresenceRequest {
}
__decorate([
    dataFormat(Contact),
    __metadata("design:type", Array)
], ContactPresenceRequest.prototype, "contacts", void 0);
exports.ContactPresenceRequest = ContactPresenceRequest;
class ContactResponse {
}
__decorate([
    dataFormat(Contact),
    __metadata("design:type", Contact)
], ContactResponse.prototype, "contact", void 0);
exports.ContactResponse = ContactResponse;
class ContactPresenceResponse {
}
__decorate([
    dataFormat(ContactResponse),
    __metadata("design:type", Array)
], ContactPresenceResponse.prototype, "contacts", void 0);
exports.ContactPresenceResponse = ContactPresenceResponse;
class ContactPresenceDisposeRequest {
}
exports.ContactPresenceDisposeRequest = ContactPresenceDisposeRequest;
class SearchContactProperty {
}
exports.SearchContactProperty = SearchContactProperty;
class SearchContactsRequest {
}
__decorate([
    dataFormat(SearchContactProperty),
    __metadata("design:type", Array)
], SearchContactsRequest.prototype, "queryOptions", void 0);
exports.SearchContactsRequest = SearchContactsRequest;
class SearchContactsResponse {
}
__decorate([
    dataFormat(Contact),
    __metadata("design:type", Array)
], SearchContactsResponse.prototype, "results", void 0);
exports.SearchContactsResponse = SearchContactsResponse;
class MessagePayload {
}
exports.MessagePayload = MessagePayload;
class SendMessageRequest extends MessagePayload {
}
exports.SendMessageRequest = SendMessageRequest;
class MessageReceivedNotification extends MessagePayload {
}
exports.MessageReceivedNotification = MessageReceivedNotification;
class SignInRequest {
}
exports.SignInRequest = SignInRequest;
class SignedStateChangedNotification {
}
exports.SignedStateChangedNotification = SignedStateChangedNotification;
class AuthenticationRequiredNotification {
}
exports.AuthenticationRequiredNotification = AuthenticationRequiredNotification;
var Methods;
(function (Methods) {
    Methods["RequestInitializeName"] = "initialize";
    Methods["RequestDisposeName"] = "dispose";
    Methods["RequestInviteName"] = "inviteLink";
    Methods["RequestPublishPresenceName"] = "publishPresence";
    Methods["RequestContactPresenceName"] = "contactPresenceRequest";
    Methods["RequestContactPresenceDisposeName"] = "contactPresenceDispose";
    Methods["RequestSearchContactsName"] = "searchContacts";
    Methods["RequestSendMessageName"] = "sendMessageRequest";
    Methods["RequestSignInName"] = "signIn";
    Methods["RequestSignOutName"] = "signOut";
    Methods["NotifyPresenceChangedName"] = "presenceChanged";
    Methods["NotifySelfContactName"] = "selfContact";
    Methods["NotifyAvailableUsersName"] = "availableUsers";
    Methods["NotifyAvailableUsersAddedName"] = "availableUsersAdded";
    Methods["NotifyAvailableUsersRemovedName"] = "availableUsersRemoved";
    Methods["NotifyInviteReceivedName"] = "inviteLinkReceived";
    Methods["NotifyContactChangedName"] = "contactChanged";
    Methods["NotifyContactPropertiesChangedName"] = "contactPropertiesChanged";
    Methods["NotifySuggestedUsersName"] = "suggestedUsers";
    Methods["NotifyCapabilitiesUpdateName"] = "capabilitiesUpdate";
    Methods["NotifyMessageReceivedName"] = "messageReceived";
    Methods["NotifySignedStateChangedName"] = "signedStateChanged";
    Methods["NotifyAuthenticationRequiredName"] = "authenticationRequired";
})(Methods = exports.Methods || (exports.Methods = {}));
exports.ContactServiceProvider = {
    methods: ['request'],
    events: ['notified'],
};
//# sourceMappingURL=vsls-contactprotocol.js.map